<div class="container">
    <div class="row">
        <div class="col-md-12 g-3">
            <h2>The Group</h2>
            <p>
                My group consisted of four members: Vital Kyungu, Nathan Ross, Brooks Halliday, and myself. Our task was to create a prototype web app.

                <br> 
                Within the group, I was responsible for much of the technical documentation and core development of the project. 
                I designed and implemented the base website architecture using Sails.js, handling both frontend and backend development while adding Bootstrap for styling and PostgreSQL for data storage. 
                One part of my work involved building the ZIP system, which allows users to enter their ZIP code and retrieve location-based information using an external API, with results stored in a database for future reference. 
                Additionally, I developed the Feedback system, enabling users to submit comments that are saved in the database.
            </p>
        </div>
        <div class="col-md-12 g-3">
            <h2>The Project</h2>
            <p> 
                This project is a Sails.js web application designed to enhance civic engagement and government transparency by allowing users to watch legislative videos, vote on political topics, and provide feedback. 
                The platform is built with Sails.js (a Node.js framework) for the backend, SQLite for data storage, and Bootstrap for styling, ensuring a better user experience. 
                It also integrates location-based services using ZIP code lookup APIs to tailor legislative content based on a user's region.
            </p>
            <p>
                The application enables users to watch pre-recorded videos, cast votes on those videos, and submit feedback about the platform. 
                Users can enter their ZIP code to receive localized information. Votes and feedback are stored in a database for analysis.
                To host the project, we uploaded it to a Google Virtual Machine (GVM) running Nginx as a proxy server.
            </p>
            <a href="http://mbgriffi.ddns.net/gp/" class="btn btn-primary" target="_blank">Project Website</a>
            <a href="https://github.com/CrypticWaffles/TheMiddlesRepo" class="btn btn-primary" target="_blank">Project Repository</a>
        </div>
        <div class="col-md-12 g-3">
            <h2>Project Experiences</h2>
            <p>
                Based on our project requirements, I knew we had to make our project run on a server and not just use straight HTML, CSS, and JavaScript.
                Weeks earlier in class, we had used the backend framework Sails.js, so I considered using that as the framework. However, I had never worked with Sails.js before, other than following along with an assignment in class.
                While working on the project, I found that Sails.js was a lot simpler than it initially seemed. As long as I understood assets, views, and APIs, it was actually fairly easy to work with. 
                In addition, we were also introduced to Bootstrap in class and decided to use it as a CSS framework.
            </p>
            <p>
                The next main necessity for the project was to decide what to use as a database. Previously, in a different class, I had worked with SQLite on a project, so I suggested that to my group, and we initially used it. 
                It was fairly simple to set up, and there was a ready-made adapter to use with Sails.js. So, we installed sails-sqlite3 into the project and began building functions around it. 
                Once we had the database set up, we were able to begin adding the rest of the features to the project. 
            </p>
            <p>
                As a group, we decided to split off each of the four main features: the ZIP code feature, the feedback feature, the video feature, and the voting feature.
                Each of us then picked one and went about implementing it. To start, I decided to implement the ZIP code feature.
                I located a free-to-use API full of ZIP code information called Zippopotam. I then added Axios to the project to make the API calls and integrated the ZIP code feature into the project.
                Overall, it was a simple process. From it, I learned how to interact with API calls for external data and how to use Axios to make them. I also learned how to interact with a database in Sails.js and about routes.
            </p>
            <img src="/images/zipcode.png" class="rounded" alt="backend code for ZIP code feature" width="40%">
            <img src="/images/zipcode2.png" class="rounded" alt="frontend code for ZIP code feature" width="40%">
            <p>
                One of my teammates ended up deciding to focus more on documentation, so I volunteered to also work on the Feedback feature. 
                This was also a simple process. I learned how to use the database better and how to build a form to submit feedback. 
            </p>
            <img src="/images/feedback.png" class="rounded" alt="backend code for feedback feature" width="40%">
            <p>
                After all four of the main features of the project were completed, we ran into our first major issue. Due to our general unfamiliarity with Sails.js, we had difficulty getting the project to run on our Google Virtual Machine (GVM).
                We tried running the project locally, and it worked fine, but when we tried to run it on our GVM, it wouldn’t work. It constantly got stuck when trying to add sails-sqlite3 to the project. But we couldn’t run our project without it, as that’s what the database was built with.
                We tried many different things to fix it, even attempting to install tools to manually rebuild it. Eventually, we had to give up and look for alternatives.
                The first idea was to host it somewhere else. I came across Ngrok, Render, and Railway. Of those, I was only able to get it to work with Ngrok. However, Ngrok was a tunneling program. It would open up a tunnel from the web to your local machine to access the project.
                Due to the potential security risks and the fact that it would require the machine running the project to remain on during the grading period, we decided to try something else. 
                It took some time, but we were able to rebuild the project using PostgreSQL instead of SQLite. Then, we uploaded it to our GVM and got it to run. However, configuring it to run alongside the other Sails.js project—my portfolio page for the class—was a challenge.
                It kept trying to use the other project’s assets and couldn’t locate its own. Eventually, after debugging for a few hours and rearranging where things were stored, we were able to get it to work.
            </p>
        </div>
        <div class="col-md-12 g-3">
            <h2>Documentation</h2>
            <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#doc1">
                Toggle SRS Document
            </button>
            <div id="doc1" class="collapse mt-3">
                <iframe src="/docs/SRS.pdf" width="100%" height="600px"></iframe>
            </div>

            <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#doc2">
                Toggle Team Charter Document
            </button>
            <div id="doc2" class="collapse mt-3">
                <iframe src="/docs/Team-Charter.pdf" width="100%" height="600px"></iframe>
            </div>
        </div>
    </div>
</div>
